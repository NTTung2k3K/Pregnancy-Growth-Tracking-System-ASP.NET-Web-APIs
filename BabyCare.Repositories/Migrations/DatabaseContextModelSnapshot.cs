// <auto-generated />
using System;
using BabyCare.Repositories.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BabyCare.Repositories.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Alert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateAlerted")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RecordId")
                        .IsUnique();

                    b.ToTable("Alerts", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserLogins", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "ProviderKey");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserTokens", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("BloodGroup")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("LastUpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("AppointmentSlot")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Result")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentTemplateId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.AppointmentChild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int?>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ChildId");

                    b.ToTable("AppointmentChild", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.AppointmentTemplates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("DaysFromBirth")
                        .HasColumnType("int");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppointmentTemplates");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.AppointmentUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("AssignedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AssignedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("DoctorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("AppointmentUsers", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Blog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("BlogTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("LikesCount")
                        .HasColumnType("int");

                    b.Property<string>("Sources")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.Property<int?>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BlogTypeId");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.BlogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Thumbnail")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("BlogTypes", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BloodType")
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("FetalGender")
                        .HasColumnType("int");

                    b.Property<bool>("IsGenerateSampleAppointments")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Childs", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FeedbackType")
                        .HasColumnType("longtext");

                    b.Property<int>("GrowthChartsID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("ResponseFeedbackId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("GrowthChartsID");

                    b.HasIndex("ResponseFeedbackId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.FetalGrowthRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float?>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FetalGrowthStandardId")
                        .HasColumnType("int");

                    b.Property<int?>("FetalHeartRate")
                        .HasColumnType("int");

                    b.Property<float?>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<string>("HealthCondition")
                        .HasColumnType("longtext");

                    b.Property<float>("Height")
                        .HasColumnType("float");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("WeekOfPregnancy")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.HasIndex("FetalGrowthStandardId");

                    b.ToTable("FetalGrowthRecords", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.FetalGrowthStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<float>("AbdominalCircumference")
                        .HasColumnType("float");

                    b.Property<float>("AverageHeight")
                        .HasColumnType("float");

                    b.Property<float>("AverageWeight")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("FetalHeartRate")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("GestationalAge")
                        .HasColumnType("longtext");

                    b.Property<float>("HeadCircumference")
                        .HasColumnType("float");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<float>("MaxHeight")
                        .HasColumnType("float");

                    b.Property<float>("MaxWeight")
                        .HasColumnType("float");

                    b.Property<float>("MinHeight")
                        .HasColumnType("float");

                    b.Property<float>("MinWeight")
                        .HasColumnType("float");

                    b.Property<int>("Week")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FetalGrowthStandards", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.GrowthChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ChildId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChildId");

                    b.ToTable("GrowthCharts", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.MembershipPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("HasGenerateAppointments")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasStandardDeviationAlerts")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HasViewGrowthChart")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxAppointmentCanBooking")
                        .HasColumnType("int");

                    b.Property<int>("MaxGrowthChartShares")
                        .HasColumnType("int");

                    b.Property<int>("MaxRecordAdded")
                        .HasColumnType("int");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageLevel")
                        .HasColumnType("int");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ShowPriority")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MembershipPackages", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("MembershipId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MembershipId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Reminder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsSent")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReminderType")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SentDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Reminders", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.UserMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedRecordCount")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentBookingCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("GrowthChartShareCount")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdatedTime")
                        .HasColumnType("datetime");

                    b.Property<int>("PackageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Status")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PackageId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMemberships", (string)null);
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Alert", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.FetalGrowthRecord", "Record")
                        .WithOne("Alert")
                        .HasForeignKey("BabyCare.Contract.Repositories.Entity.Alert", "RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationRoleClaims", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationRoles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserClaims", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserLogins", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserRoles", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationRoles", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUserTokens", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.AppointmentTemplates", "AppointmentTemplate")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentTemplate");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.AppointmentChild", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("AppointmentChildren")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.Child", "Child")
                        .WithMany("AppointmentChildren")
                        .HasForeignKey("ChildId");

                    b.Navigation("Appointment");

                    b.Navigation("Child");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.AppointmentUser", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithMany("AppointmentUsers")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("AppointmentUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Blog", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "Author")
                        .WithMany("Blogs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.BlogType", "BlogType")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("BlogType");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Child", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("Children")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.GrowthChart", "GrowthChart")
                        .WithMany("Feedbacks")
                        .HasForeignKey("GrowthChartsID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.Feedback", "ResponseFeedback")
                        .WithMany("ResponseFeedbacks")
                        .HasForeignKey("ResponseFeedbackId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GrowthChart");

                    b.Navigation("ResponseFeedback");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.FetalGrowthRecord", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.Child", "Child")
                        .WithMany("FetalGrowthRecords")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.FetalGrowthStandard", "FetalGrowthStandard")
                        .WithMany("FetalGrowthRecords")
                        .HasForeignKey("FetalGrowthStandardId");

                    b.Navigation("Child");

                    b.Navigation("FetalGrowthStandard");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.GrowthChart", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.Child", "Child")
                        .WithMany("GrowthCharts")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Child");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Payment", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.UserMembership", "Membership")
                        .WithMany("Payments")
                        .HasForeignKey("MembershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Reminder", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.Appointment", "Appointment")
                        .WithOne("Reminder")
                        .HasForeignKey("BabyCare.Contract.Repositories.Entity.Reminder", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.UserMembership", b =>
                {
                    b.HasOne("BabyCare.Contract.Repositories.Entity.MembershipPackage", "Package")
                        .WithMany("UserMemberships")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BabyCare.Contract.Repositories.Entity.ApplicationUsers", "User")
                        .WithMany("UserMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationRoles", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.ApplicationUsers", b =>
                {
                    b.Navigation("AppointmentUsers");

                    b.Navigation("Blogs");

                    b.Navigation("Children");

                    b.Navigation("Feedbacks");

                    b.Navigation("UserMemberships");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Appointment", b =>
                {
                    b.Navigation("AppointmentChildren");

                    b.Navigation("AppointmentUsers");

                    b.Navigation("Reminder")
                        .IsRequired();
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.AppointmentTemplates", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.BlogType", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Child", b =>
                {
                    b.Navigation("AppointmentChildren");

                    b.Navigation("FetalGrowthRecords");

                    b.Navigation("GrowthCharts");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.Feedback", b =>
                {
                    b.Navigation("ResponseFeedbacks");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.FetalGrowthRecord", b =>
                {
                    b.Navigation("Alert");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.FetalGrowthStandard", b =>
                {
                    b.Navigation("FetalGrowthRecords");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.GrowthChart", b =>
                {
                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.MembershipPackage", b =>
                {
                    b.Navigation("UserMemberships");
                });

            modelBuilder.Entity("BabyCare.Contract.Repositories.Entity.UserMembership", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
